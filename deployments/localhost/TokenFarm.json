{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addAllowedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_allowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_stakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenIsAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0615f658304e72dc656d94f26c855840f4f9bc9c1f54454499f690f6c1076ef",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "833642",
    "logsBloom": "0x
    "blockHash": "0x15b3320aad039d6294ce0b720b63f2bcf121645a4b03ed2881a56a2a3b49f079",
    "transactionHash": "0xb0615f658304e72dc656d94f26c855840f4f9bc9c1f54454499f690f6c1076ef",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xb0615f658304e72dc656d94f26c855840f4f9bc9c1f54454499f690f6c1076ef",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x15b3320aad039d6294ce0b720b63f2bcf121645a4b03ed2881a56a2a3b49f079"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "833642",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "53d094e8872938dba8db8c1b6f3db72b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_allowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFarm.sol\":\"TokenFarm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/TokenFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract TokenFarm is Ownable {\\n    address[] public s_allowedTokens;\\n    // tokenaddress -> owner -> balance\\n    mapping(address => mapping(address => uint256)) public s_stakingBalance;\\n    // unstakeTokens\\n    // issueTokens\\n    // stakeTokens\\n    function stakeTokens(uint256 amount, address token) public {\\n        require(amount > 0, \\\"Amount cannot be 0\\\");\\n        require(tokenIsAllowed(token), \\\"Token isn't allowed\\\");\\n        // transfer the token from them, to \\\"us\\\"\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        s_stakingBalance[token][msg.sender] = s_stakingBalance[token][msg.sender] + amount;\\n    }\\n\\n    function addAllowedTokens(address token) public onlyOwner {\\n        s_allowedTokens.push(token);\\n    }\\n\\n    function tokenIsAllowed(address token) public returns (bool){\\n        for(uint256 allowedTokensIndex = 0; \\n        allowedTokensIndex < s_allowedTokens.length;\\n        allowedTokensIndex++){\\n            if(s_allowedTokens[allowedTokensIndex] == token){\\n                return true;\\n            }\\n        }\\n        return false; \\n    }\\n}\\n\",\"keccak256\":\"0x434e30bd29acc2c4a884fa611545186f99873e043be97d4869795801360ade45\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610daf8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146101255780638da5cb5b1461012f578063dd5b84671461014d578063f2fde38b1461017d57610088565b80630af8c88e1461008d5780630bea440d146100bd578063171e44ea146100d957806366b11164146100f5575b600080fd5b6100a760048036038101906100a2919061091d565b610199565b6040516100b49190610a3b565b60405180910390f35b6100d760048036038101906100d29190610946565b6101d8565b005b6100f360048036038101906100ee919061088f565b6103ff565b005b61010f600480360381019061010a91906108b8565b6104e1565b60405161011c9190610b28565b60405180910390f35b61012d610506565b005b61013761058e565b6040516101449190610a3b565b60405180910390f35b6101676004803603810190610162919061088f565b6105b7565b6040516101749190610a8d565b60405180910390f35b6101976004803603810190610192919061088f565b61068c565b005b600181815481106101a957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000821161021b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021290610ae8565b60405180910390fd5b610224816105b7565b610263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025a90610b08565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016102a093929190610a56565b602060405180830381600087803b1580156102ba57600080fd5b505af11580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f291906108f4565b5081600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461037b9190610b54565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b610407610784565b73ffffffffffffffffffffffffffffffffffffffff1661042561058e565b73ffffffffffffffffffffffffffffffffffffffff161461047b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047290610ac8565b60405180910390fd5b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6002602052816000526040600020602052806000526040600020600091509150505481565b61050e610784565b73ffffffffffffffffffffffffffffffffffffffff1661052c61058e565b73ffffffffffffffffffffffffffffffffffffffff1614610582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057990610ac8565b60405180910390fd5b61058c600061078c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090505b600180549050811015610681578273ffffffffffffffffffffffffffffffffffffffff166001828154811061061d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561066e576001915050610687565b808061067990610bf2565b9150506105bf565b50600090505b919050565b610694610784565b73ffffffffffffffffffffffffffffffffffffffff166106b261058e565b73ffffffffffffffffffffffffffffffffffffffff1614610708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ff90610ac8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f90610aa8565b60405180910390fd5b6107818161078c565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061085f81610d34565b92915050565b60008151905061087481610d4b565b92915050565b60008135905061088981610d62565b92915050565b6000602082840312156108a157600080fd5b60006108af84828501610850565b91505092915050565b600080604083850312156108cb57600080fd5b60006108d985828601610850565b92505060206108ea85828601610850565b9150509250929050565b60006020828403121561090657600080fd5b600061091484828501610865565b91505092915050565b60006020828403121561092f57600080fd5b600061093d8482850161087a565b91505092915050565b6000806040838503121561095957600080fd5b60006109678582860161087a565b925050602061097885828601610850565b9150509250929050565b61098b81610baa565b82525050565b61099a81610bbc565b82525050565b60006109ad602683610b43565b91506109b882610c6a565b604082019050919050565b60006109d0602083610b43565b91506109db82610cb9565b602082019050919050565b60006109f3601283610b43565b91506109fe82610ce2565b602082019050919050565b6000610a16601383610b43565b9150610a2182610d0b565b602082019050919050565b610a3581610be8565b82525050565b6000602082019050610a506000830184610982565b92915050565b6000606082019050610a6b6000830186610982565b610a786020830185610982565b610a856040830184610a2c565b949350505050565b6000602082019050610aa26000830184610991565b92915050565b60006020820190508181036000830152610ac1816109a0565b9050919050565b60006020820190508181036000830152610ae1816109c3565b9050919050565b60006020820190508181036000830152610b01816109e6565b9050919050565b60006020820190508181036000830152610b2181610a09565b9050919050565b6000602082019050610b3d6000830184610a2c565b92915050565b600082825260208201905092915050565b6000610b5f82610be8565b9150610b6a83610be8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b9f57610b9e610c3b565b5b828201905092915050565b6000610bb582610bc8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610bfd82610be8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c3057610c2f610c3b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416d6f756e742063616e6e6f7420626520300000000000000000000000000000600082015250565b7f546f6b656e2069736e277420616c6c6f77656400000000000000000000000000600082015250565b610d3d81610baa565b8114610d4857600080fd5b50565b610d5481610bbc565b8114610d5f57600080fd5b50565b610d6b81610be8565b8114610d7657600080fd5b5056fea26469706673582212206c2363463450c1a2e9c7209e25da12c9013756ef0839fe9071a83c384ba333a764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146101255780638da5cb5b1461012f578063dd5b84671461014d578063f2fde38b1461017d57610088565b80630af8c88e1461008d5780630bea440d146100bd578063171e44ea146100d957806366b11164146100f5575b600080fd5b6100a760048036038101906100a2919061091d565b610199565b6040516100b49190610a3b565b60405180910390f35b6100d760048036038101906100d29190610946565b6101d8565b005b6100f360048036038101906100ee919061088f565b6103ff565b005b61010f600480360381019061010a91906108b8565b6104e1565b60405161011c9190610b28565b60405180910390f35b61012d610506565b005b61013761058e565b6040516101449190610a3b565b60405180910390f35b6101676004803603810190610162919061088f565b6105b7565b6040516101749190610a8d565b60405180910390f35b6101976004803603810190610192919061088f565b61068c565b005b600181815481106101a957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000821161021b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021290610ae8565b60405180910390fd5b610224816105b7565b610263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025a90610b08565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016102a093929190610a56565b602060405180830381600087803b1580156102ba57600080fd5b505af11580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f291906108f4565b5081600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461037b9190610b54565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b610407610784565b73ffffffffffffffffffffffffffffffffffffffff1661042561058e565b73ffffffffffffffffffffffffffffffffffffffff161461047b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047290610ac8565b60405180910390fd5b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6002602052816000526040600020602052806000526040600020600091509150505481565b61050e610784565b73ffffffffffffffffffffffffffffffffffffffff1661052c61058e565b73ffffffffffffffffffffffffffffffffffffffff1614610582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057990610ac8565b60405180910390fd5b61058c600061078c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090505b600180549050811015610681578273ffffffffffffffffffffffffffffffffffffffff166001828154811061061d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561066e576001915050610687565b808061067990610bf2565b9150506105bf565b50600090505b919050565b610694610784565b73ffffffffffffffffffffffffffffffffffffffff166106b261058e565b73ffffffffffffffffffffffffffffffffffffffff1614610708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ff90610ac8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f90610aa8565b60405180910390fd5b6107818161078c565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061085f81610d34565b92915050565b60008151905061087481610d4b565b92915050565b60008135905061088981610d62565b92915050565b6000602082840312156108a157600080fd5b60006108af84828501610850565b91505092915050565b600080604083850312156108cb57600080fd5b60006108d985828601610850565b92505060206108ea85828601610850565b9150509250929050565b60006020828403121561090657600080fd5b600061091484828501610865565b91505092915050565b60006020828403121561092f57600080fd5b600061093d8482850161087a565b91505092915050565b6000806040838503121561095957600080fd5b60006109678582860161087a565b925050602061097885828601610850565b9150509250929050565b61098b81610baa565b82525050565b61099a81610bbc565b82525050565b60006109ad602683610b43565b91506109b882610c6a565b604082019050919050565b60006109d0602083610b43565b91506109db82610cb9565b602082019050919050565b60006109f3601283610b43565b91506109fe82610ce2565b602082019050919050565b6000610a16601383610b43565b9150610a2182610d0b565b602082019050919050565b610a3581610be8565b82525050565b6000602082019050610a506000830184610982565b92915050565b6000606082019050610a6b6000830186610982565b610a786020830185610982565b610a856040830184610a2c565b949350505050565b6000602082019050610aa26000830184610991565b92915050565b60006020820190508181036000830152610ac1816109a0565b9050919050565b60006020820190508181036000830152610ae1816109c3565b9050919050565b60006020820190508181036000830152610b01816109e6565b9050919050565b60006020820190508181036000830152610b2181610a09565b9050919050565b6000602082019050610b3d6000830184610a2c565b92915050565b600082825260208201905092915050565b6000610b5f82610be8565b9150610b6a83610be8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b9f57610b9e610c3b565b5b828201905092915050565b6000610bb582610bc8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610bfd82610be8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c3057610c2f610c3b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416d6f756e742063616e6e6f7420626520300000000000000000000000000000600082015250565b7f546f6b656e2069736e277420616c6c6f77656400000000000000000000000000600082015250565b610d3d81610baa565b8114610d4857600080fd5b50565b610d5481610bbc565b8114610d5f57600080fd5b50565b610d6b81610be8565b8114610d7657600080fd5b5056fea26469706673582212206c2363463450c1a2e9c7209e25da12c9013756ef0839fe9071a83c384ba333a764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 803,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "s_allowedTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 809,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "s_stakingBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}